


{
    "chapters": [
        {
            "chapter": 27,
            "description": "Controlling versions with Git",
            "questions": [
                {
                    "number": 397,
                    "question": "Which of the following is true concerning version control? (Choose all that apply.)",
                    "options": ["Provides a common place to merge and store files", "Requires filenames to contain version numbers", "May be distributed or nondistributed", "Helps to protect files from being overwritten", "Can deal with files other than programs"],
                    "answer": ["Provides a common place to merge and store files", "May be distributed or nondistributed", "Helps to protect files from being overwritten", "Can deal with files other than programs"],
                    "explanation": {
                        "Provides a common place to merge and store files": "This is correct; version control systems provide a repository for this purpose.",
                        "Requires filenames to contain version numbers": "This is incorrect; version control does not require this.",
                        "May be distributed or nondistributed": "This is correct; version control can be implemented as both.",
                        "Helps to protect files from being overwritten": "This is correct; it tracks changes to prevent accidental overwrites.",
                        "Can deal with files other than programs": "This is correct; version control can manage various types of files."
                    }
                },
                {
                    "number": 398,
                    "question": "Conceptually Git is broken up into distinct areas. Which of the following is one of those areas? (Choose all that apply.)",
                    "options": ["Blob", "Local repository", "Remote repository", "Index", "Working directory"],
                    "answer": ["Local repository", "Remote repository", "Index", "Working directory"],
                    "explanation": {
                        "Blob": "This term refers to objects stored in Git but is not a distinct area.",
                        "Local repository": "This is a correct area where changes are stored locally.",
                        "Remote repository": "This is a correct area for storing shared changes.",
                        "Index": "This is correct; it acts as a staging area.",
                        "Working directory": "This is correct; it is where files are modified."
                    }
                },
                {
                    "number": 399,
                    "question": "Which of the following are steps needed to set up a Git environment for the first time? (Choose all that apply.)",
                    "options": ["Create a working directory.", "Initialize the .git/ directory in the working directory.", "Set up the local repository options.", "Add files to the staging area when ready.", "Establish the remote repository."],
                    "answer": ["Create a working directory.", "Initialize the .git/ directory in the working directory.", "Set up the local repository options.", "Establish the remote repository."],
                    "explanation": {
                        "Create a working directory.": "This is necessary to start using Git.",
                        "Initialize the .git/ directory in the working directory.": "This is correct; it sets up the Git environment.",
                        "Set up the local repository options.": "This is correct; local options need to be configured.",
                        "Add files to the staging area when ready.": "This is done after setting up the environment, so it is not a first step.",
                        "Establish the remote repository.": "This is part of the setup process."
                    }
                },
                {
                    "number": 400,
                    "question": "Natasha has created her working directory for a new project. What should she do next to set up her Git project environment?",
                    "options": ["Issue the mkdir command.", "Enter the git config --list command.", "Set up her GitHub repository.", "Enter the git init command.", "Start creating her program files."],
                    "answer": "Enter the git init command.",
                    "explanation": {
                        "Issue the mkdir command.": "This command is used for creating directories, not for setting up Git.",
                        "Enter the git config --list command.": "This shows configuration data, not setting up the environment.",
                        "Set up her GitHub repository.": "This can be done after initializing Git.",
                        "Enter the git init command.": "This initializes the .git/ directory in her project.",
                        "Start creating her program files.": "This can be done after setting up the Git environment."
                    }
                },
                {
                    "number": 401,
                    "question": "When setting his Git configuration options, Bruce employs the --global option on his commands. What does this mean?",
                    "options": ["The configuration information is stored on GitHub.", "The configuration information is stored in ~/.gitconfig.", "The configuration information is stored in the working directory's .git/config file.", "The configuration information is stored in the working directory's .git/index file.", "The configuration information is stored in the working directory's .git/objects directory."],
                    "answer": "The configuration information is stored in ~/.gitconfig.",
                    "explanation": {
                        "The configuration information is stored on GitHub.": "This is incorrect; GitHub is a hosting service.",
                        "The configuration information is stored in ~/.gitconfig.": "This is correct; this file holds global Git settings.",
                        "The configuration information is stored in the working directory's .git/config file.": "This is only for local configuration.",
                        "The configuration information is stored in the working directory's .git/index file.": "This file tracks changes, not configuration.",
                        "The configuration information is stored in the working directory's .git/objects directory.": "This directory stores objects, not configuration."
                    }
                },
                {
                    "number": 402,
                    "question": "Bruce has set up his Git environment and finished working on his new GreenMass.sh script. What should he do next?",
                    "options": ["Add the script to the staging area.", "Issue the git init command.", "Commit the script to the local repository.", "Issue the git log command.", "Commit the script to the remote repository."],
                    "answer": "Add the script to the staging area.",
                    "explanation": {
                        "Add the script to the staging area.": "This is the correct next step before committing.",
                        "Issue the git init command.": "This command is already done during setup.",
                        "Commit the script to the local repository.": "This cannot be done until it is added to the staging area.",
                        "Issue the git log command.": "This command shows the commit history, not the next step.",
                        "Commit the script to the remote repository.": "This cannot be done until it is committed locally first."
                    }
                },
                {
                    "number": 403,
                    "question": "There are 25 files in Natasha's working directory and she only wants to add 22 of them to the index. She plans on using the git add . command to be efficient. What should she do?",
                    "options": ["Move the three files out of her working directory.", "Add the 22 files individually via the git add command.", "Create a new working directory for the three files.", "Add the three files' names to a .gitignore file.", "Temporarily delete the three files."],
                    "answer": "Add the three files' names to a .gitignore file.",
                    "explanation": {
                        "Move the three files out of her working directory.": "This is inefficient and not needed.",
                        "Add the 22 files individually via the git add command.": "This is tedious and counterproductive.",
                        "Create a new working directory for the three files.": "This is unnecessary and inefficient.",
                        "Add the three files' names to a .gitignore file.": "This is the correct approach to prevent them from being added.",
                        "Temporarily delete the three files.": "This is sloppy and not a good practice."
                    }
                },
                {
                    "number": 404,
                    "question": "Natasha has completed her open source project, which is set to be released to the public today. She has moved the files to the staging area, committed her work to the local repository, and configured the remote repository's address. What is her next step?",
                    "options": ["Go home and relax. She deserves it.", "Clone the remote repository to her local system.", "Push her project to the remote repository.", "Pull her project from the remote repository.", "Use the remote add origin URL command."],
                    "answer": "Push her project to the remote repository.",
                    "explanation": {
                        "Go home and relax. She deserves it.": "This is not an action related to her project.",
                        "Clone the remote repository to her local system.": "This is unnecessary since she already has the local copy.",
                        "Push her project to the remote repository.": "This is the correct next step to release her project.",
                        "Pull her project from the remote repository.": "This is not needed as she has already configured the remote.",
                        "Use the remote add origin URL command.": "This step has already been completed."
                    }
                },
                {
                    "number": 405,
                    "question": "Which of the following commands allows you to switch to a new Git branch called testing?",
                    "options": ["git branch testing", "git ls-tree --name-only -r testing", "git branch", "git commit -m \"testing\"", "git checkout testing"],
                    "answer": "git checkout testing",
                    "explanation": {
                        "git branch testing": "This command creates a new branch but does not switch to it.",
                        "git ls-tree ––name-only -r testing": "This command lists files in a branch but does not switch branches.",
                        "git branch": "This command lists branches but does not switch branches.",
                        "git commit -m \"testing\"": "This command commits changes, not switching branches.",
                        "git checkout testing": "This command switches to the specified branch."
                    }
                },
                {
                    "number": 406,
                    "question": "Tony created a new branch of the StoneTracker project called report. He has completed and tested his work. He now needs to merge it with the StoneTracker project's master branch. After switching branches to the master branch, what command should he employ?",
                    "options": ["git merge master", "git merge report", "git rebase master", "git rebase report", "git checkout master"],
                    "answer": "git merge report",
                    "explanation": {
                        "git merge master": "This command would merge the master into another branch, which is incorrect.",
                        "git merge report": "This command correctly merges the report branch into master.",
                        "git rebase master": "This command is used for rebasing, not merging.",
                        "git rebase report": "This command is also for rebasing, not merging.",
                        "git checkout master": "This command switches to the master branch, but does not merge."
                    }
                }
            ]
        }
    ]
}
